3-21
-------------------------
World.cpp
 - made new function: updateCamera(). This updates world view every frame after System::update
	to reduce jitter when player moves laterally

Fixed issue with new context being created when scenes and worlds are created. Made mStack and mContext protected in Scene.h.

3-8
--------------------------

Added air attack to Doji (Hailbringer)
Added new state to Ninja (CStateNinjaHitAirToGround)
Updated Controls screen

3-6
---------------------------
Added/fixed sound effects


3-1b
---------------------------
Title Screen
	- Buttons added with full functionality
	- Controls screen added

Paused Screen
	- Buttons added with full functionality
	- Controls screen added

Game
	- Lowered Ryobe's jump



3-1
---------------------------
Level restarts when player dies
Title Screen music added
Woods Level background music added
Ryobe Battle music added
Player vocal sounds for regular slashes added

2-27
---------------------------
World
	- Raised the floor of the world
	- made the background without the foreground layer
	- delayed input at boss battle start
	- only begins boss fight when all minor enemies are dead
	- added a fadeout shape that is triggered when the player defeats the boss

Player
	- added WinState to player for his winning pose



2-22
--------------------------
Title screen
	- Created title screen, which includes:
		1.) Black fade-in screen
		2.) Image of Doji
		3.) Animated raining background
		4.) White sprite that flashes to simulate lightning

Player
	- Added BattleReady state, which also delays input at level start
	- Added attack special effects for ChopperStyle and Impact attacks


2-21
--------------------------
Placed Ryobe in correct position with lightning walls. Ryobe collides with wall, too.
Ryobe HUD stuff moved to his BattleEntrance state, then will give it to RyobeLogic
 when state is over.
Added Ryobe death state.
Added Player attackblocked states, grounded and air.

2-16b
--------------------------
Removed playerbox collision with ninja collider

2-16
---------------------------
Added HUD for Ryobe and Player
Added healthbar logic for Ryobe and Player
Added Lightning wall to game and collision logic


2-14
---------------------------
Gave Ryobe more attacks
	- charge, embracer

Gave Ryobe slash attack box

2-12
----------------------------
Modified how game objects are destroyed (this work was done 2 days ago)
	- In System::removeGameObject(), I commented out the deletion stuff and made a call to 
		GameObject::Destroy() instead, which will remove all components, remove the object
		from its parent's list of children, make recursive calls on Destroy() on all child objects,
		then finally remove the object from System::mGameObjects

2-9
-----------------------------
Added blood splatter animation to the game for Ryobe

Adding blood splatter and making it a child object of Ryobe brought up a bug needed to be fixed:
	- The object gets removed from scene as normal, but it was never removed from Ryobe's vector
		of mChildren. I added functionality to System::removeGameObject() function to also remove
		from parent's children vector if it has a parent. The main change was moving ownership
		of the game object to a local variable so it remains alive until all removal functions
		are complete.




2-6
-----------------------------
Made an update with event/input handling.
	- Logically, I separated event handling from input handling. In Game.h, SceneStack.h, Scene.h, World.h, and 
		System.h, I made sure two events are created and called every game loop: handleEvent() and handleInput().
		This solves the issue of the player not running when the left/right key is held when the player lands.
		I may need to create two distinct functions in the InputComponent as well to handle events and inputs.
		Currently, the InputComponent calls handleInput() on the current state twice: once in InputComponents::handleInput()
		and once in InputComponent::handleEvent(). This may cause problems later but will address when the issue arises.

Started adding new boss to game: Ryobe
	- Ryobe has logic and render states. Just need to add the fighting behavior logic.

2-3
-----------------------------
Did some work with child transform.
	GameObject.h/cpp
	 - new variable: mChildPosition;
	 - new functions: setChildPosition() and moveChild(), which essential sets and adds to the mChildPosition variable
	 - in updateTransforms(), I set the absolute position of child objects to the product of the 
		parent's transform and the mChildPosition variable
	 - new function: getWorldPosition(), which returns the absolute position of the object
	 - updated function: getLocalPosition, which returns the position of the object relative to its parent, if applicable

	

2-2
-----------------------------
Made a change to the red orb setup.
	Red Orb count will be kept by PlayerLogic instead of the GUIRedOrbRender. PlayerLogic will feed
	GUIRedOrbRender the updated amount when the player picks up a red orb.

Health Bar Update
	Health bar will increase when the player picks up a green orb.


2-1
------------------------------
Added red orbs to the game.
	The ninja will randomly drop a red orb if the random number is met. Player will collide and
	remove the orb from scene.
Added green orbs to the game.
	They are functional, but not in any logic so far.
	
Added healthbar
	To add healthbar, I had to modify the RenderComponent::update() function to take the window
	as a parameter and add a case handler for UI-layered elements to offset the position by
	the current view.
	The healthbar will decrease when the player is hit.
	

1-31
------------------------------
Changed guard state to only play the guard animation when the player gets hit. Pressing the down arrow
enters guard state but doesn't change the sprite. This is so the player can use the down arrow to perform
a move without it quickly switching to the guarding sprite.

Earlier, I also made the console print the grid position of the cursor when the mouse is clicked.

1-25
------------------------------
I would occasionally get an error in the System::removeGameObject() function, giving an error about
the == operator when comparing the gameObject's layername to the layer's name.

I moved the section that removes the game object from the scene layers inside the for-loop that iterates
the game object vector and made the change to dereference (*obj_itr) instead of gameObject when comparing names

I also added a variable called mLookatPoint to focus the camera on as the player changes directions in World.cpp.

1-23
-------------------------------
Added Player Air Hit logic.
Added Ninja Air Hit logic.
Fixed an issue with the Ninja moving backwards when he collides with his slash's attack box.


1-17
--------------------------------
Lots of changes made, some forgotten
First, the attacks have been added. AttackType.cpp hosts the names of all registered attacks.


1-5
--------------------------------
Added Box Collider Component. It is showing in the game if visible is set to true. 
No collision testing is added for it yet, however....

12-31
-------------------------------
Starting using a Component/Entity-based System. So far, it is working.

The System class is a static class that updates the C/ES system. 

The player is responding to left and right key inputs and events. Now I just need 
to figure out how to make a scenenode graph, dividing the game objects into layers, how 
to implement a state stack, and how to create different scenes, loading objects when the
game goes to a different scene.

12-22
----------------------
fixed a tweak with the jumping

12-21
-------------------
Further improvements to the tile engine - it appears all movements and collisions work!

12-21
Also got the falling and jumping states to respond correctly to collision with tiles above and below the player
with the checkTileAbovePlayer and checkTileBelowPlayer functions

//	12-21
Implemented states to the class: Standing and Jumping